#!/usr/bin/env node

const log = require('../core/log').getLogger();
const port = require('../conf').server.port;
const server = require('../server');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

function releaseServer() {

    if (cluster.isMaster) {
        log.info(`Master ${process.pid} is running`);

        // Fork workers.
        for (let i = 0; i < numCPUs; i++) {
            cluster.fork();
        }

        cluster.on('exit', (worker, code, signal) => {
            log.info(`worker ${worker.process.pid} died`);
        });
    } else {
        // Workers can share any TCP connection
        // In this case it is an HTTP server
        server.listen(port);

        log.info(`Worker ${process.pid} started`);
    }
}


server.on('error', function onError(error) {
    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            log.error(bind + ' requires elevated privileges');
            break;
        case 'EADDRINUSE':
            log.error(bind + ' is already in use');
            break;
        default:
            log.error(error.message);
            break;
    }
    process.exit(1);
});
server.on('listening', function onListening() {
        let addr = server.address();
        let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
        log.info('server listening on ' + bind);
    }
);

releaseServer();
